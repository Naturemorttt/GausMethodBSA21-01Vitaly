#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <locale.h>
#include <conio.h>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    //Объявляем переменные:
    int i;//Переменная, номер строки.
    int j;//Переменная, номер столбца.
    int n;//Размерность системы 
    int m;//Размерность системы 

    //Создаем массив:
    cout << "Введите числа:" << endl;
    cin >> n;//Вводим размерность системы.

    m = n + 1;
    long double** A = new long double* [n];
    for (i = 0; i < n; i++)
        A[i] = new long double[m];

    //Инициализируем:
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            cin >> A[i][j];
            cout << endl;
        }
    }

    //Выводим массив:
    cout << "Матрицa:" << endl;

    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (j == n)
            {
                cout << "|";
            }
            cout << A[i][j] << " ";
        }
        cout << endl;
    }

    cout << endl;

    int k;
    int nl;//Переменная номер строки с ведущим элементом.
    long double o = 0;//Перемнная для поиска самого большого по модулю элемента в матрице. 
    long double p = 0;//Перемнная для поиска самого большого по модулю элемента в матрице.
    long double tmp = 0;//Временная перемнная для прямого хода метода Гаусса.

    for (k = 0; k < n; k++)
    {

        //Поиск ведущего элемента:
        p = 0;
        nl = k;
        for (i = k; i < n; i++)
        {
            o = fabs(A[i][k]);
            if (fabs(o) > fabs(p))
            {
                p = fabs(o);//Нашли значение самого большого элемента.
                nl = i;//Нашли номер строки с самым большим по модулю элементом (ведущим элементом).
            }
        }

        //Перестановка строк:
        if (nl != k)
        {
            for (i = k; i < n + 1; i++)
            {
                long double tmp_line = 0;//Временная переменная для перестановки строк местами.
                tmp_line = A[nl][i];
                A[nl][i] = A[k][i];
                A[k][i] = tmp_line;
            }
        }


        //Прямой ход, приведение к верхнетреугольному виду:

        tmp = A[k][k];//Первый элемент в текущей матрице.

        if (tmp != 0)
        {

            //Выводим массив:
            

            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    if (j == n)
                    {
                        cout << "|";
                    }
                    cout << A[i][j] << " ";
                }
                cout << endl;
            }

            cout << endl;

            for (j = k; j < n + 1; j++)//Нормализация.
            {
                A[k][j] = A[k][j] / tmp;
            }

            //Выводим массив:
            cout << "Новый массив " << endl;

            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    if (j == n)
                    {
                        cout << "|";
                    }
                    cout << A[i][j] << " ";
                }
                cout << endl;
            }

            cout << endl;

            for (i = k + 1; i < n; i++)
            {
                tmp = A[i][k];//Главный элемент.
                for (j = k; j < n + 1; j++)//Из следующей строки вычитаем первую, умноженную на главный элемент.
                {
                    A[i][j] = A[i][j] - tmp * A[k][j];
                }
            }
        }

        //Выводим массив:
        cout << "Новый массив :) " << endl;

        for (i = 0; i < n; i++)
        {
            for (j = 0; j < m; j++)
            {
                if (j == n)
                {
                    cout << "|";
                }
                cout << A[i][j] << " ";
            }
            cout << endl;
        }

        cout << endl;

    }

    //Выводим массив после приведения матрицы к верхнетреугольному виду:
    cout << "Треугольный вид матрицы: " << endl;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < m; j++)
        {
            if (j == n)
            {
                cout << "|";
            }
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;

    //Обратный ход:
    for (k = n - 1; k >= 0; k--)
    {
        for (i = 0; i < k; i++)
        {
            tmp = A[i][k];//Множитель.
            for (j = k; j < n + 1; j++)//Из следующей строки вычитаем первую, умноженную на главный элемент.
            {
                A[i][j] = A[i][j] - tmp * A[k][j];
            }
        }

        //Выводим массив:
        

        for (i = 0; i < n; i++)
        {
            for (j = 0; j < m; j++)
            {
                if (j == n)
                {
                    cout << "|";
                }
                cout << A[i][j] << " ";
            }
            cout << endl;
        }

        cout << endl;

    }

    bool nenulinline = false;//Переменная, которая обозначает, что в строке есть ненулевой элемент.
    bool netresh = false;//Переменная, которая обозначает, что система не имеет решений.
    bool beskresh = false;//Переменная, которая обозначает, что система имеет бесконечное множество решений.

    for (k = 0; k < n; k++)
    {
        if (A[k][k] == 0)//Если на диагонали 0, значит проверяем строку.
        {
            nenulinline = false;//Обнуляем переменную.
            for (j = k + 1; j < n; j++)
            {
                if (A[k][j] != 0)//Если в строке есть ненулевой элемент значит обозначим это через флаг.
                {
                    nenulinline = true;
                }
            }
            if (!nenulinline)//Если в строке все нули, то проверям свободный член.
            {
                if (A[k][n] != 0)//Если не равно нулю, то решений нет.
                {
                    netresh = true;
                }
                else//А иначе данное уравнение решается всегда.
                {
                    beskresh = true;
                }
            }
        }
    }

    //Выводим решения
    if (netresh == true)
    {
        cout << "Нет решений" << endl;
    }
    else
    {
        if (beskresh == true)
        {
            cout << "бесконечное кол-во решений" << endl;
        }
        else
        {
            for (i = 0; i < n; i++)
            {
                cout << "x" << i + 1 << "=" << A[i][n] << endl;
            }
        }
    }



    //Удаляем массив:
    delete[] A;

    
    return 0;
}
